# (3) name of variable that identifies time, in milliseconds
data$t_ms <- data$YOUR_VARIABLE_NAME_HERE
# (3) name of variable that identifies speaker, for optional speaker summary stats
data$speaker <- data$YOUR_VARIABLE_NAME_HERE
#### ADJUST THESE THRESHOLDS IF DESIRED ####
# from Sundberg (1973), for 10 ms intervals and female speakers
rise_threshold = 1.2631578947
fall_threshold = 1.7142857143
time_mutation = time_step_ms/10
data %>% group_by(uniqueID) %>%
mutate(lead_F0_semitones= lead(F0_semitones, order_by=t_ms),
diff = lead_F0_semitones-F0_semitones,
err = ifelse(diff>0&(abs(diff)*time_mutation)>rise_threshold,1,
ifelse(diff<0&(abs(diff)*time_mutation)>fall_threshold,1,0)),
err_prop_by_ID = mean(err,na.rm = T),
err_count_by_ID = sum(err,na.rm = T),
err_in_ID=ifelse(err_prop_by_ID>0,1,0)) -> data_annotated
### required input:
### output
# this package required:
library(tidyverse)
# if not installed, use the following: install.packages("tidyverse")
# load in data here
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
data<-read.csv("example10speakers.csv")
### ### ### ### ### ### ### ### ### ### ### ### ### ### ### ### ### ###
#### SET THESE PARAMETERS #############################################
# (1) input the sampling rate of your F0 measures in milliseconds
time_step_ms = 10
# this package required:
library(tidyverse)
# load in data here
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
data<-read.csv("example10speakers.csv")
### ### ### ### ### ### ### ### ### ### ### ### ### ### ### ### ### ###
#### SET THESE PARAMETERS #############################################
# (1) input the sampling rate of your F0 measures in milliseconds
time_step_ms = 10
## variable names
# input the names of the required variables in your data frame
# (2) name of F0 (in semitones): replace YOUR_VARIABLE_NAME_HERE with your variable
data$F0_semitones <- data$YOUR_VARIABLE_NAME_HERE
# (3) name of variable that identifies each unique trajectory
data$uniqueID <- data$YOUR_VARIABLE_NAME_HERE
# (3) name of variable that identifies time, in milliseconds
data$t_ms <- data$YOUR_VARIABLE_NAME_HERE
# (3) name of variable that identifies speaker, for optional speaker summary stats
data$speaker <- data$YOUR_VARIABLE_NAME_HERE
#### ADJUST THESE THRESHOLDS IF DESIRED ####
# from Sundberg (1973), for 10 ms intervals and female speakers
rise_threshold = 1.2631578947
fall_threshold = 1.7142857143
time_mutation = time_step_ms/10
data %>% group_by(uniqueID) %>%
mutate(lead_F0_semitones= lead(F0_semitones, order_by=t_ms),
diff = lead_F0_semitones-F0_semitones,
err = ifelse(diff>0&(abs(diff)*time_mutation)>rise_threshold,1,
ifelse(diff<0&(abs(diff)*time_mutation)>fall_threshold,1,0)),
err_prop_by_ID = mean(err,na.rm = T),
err_count_by_ID = sum(err,na.rm = T),
err_in_ID=ifelse(err_prop_by_ID>0,1,0)) -> data_annotated
# this package required:
library(tidyverse)
# load in data here
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
data<-read.csv("example10speakers.csv")
# this package required:
library(tidyverse)
# load in data here
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
data<-read.csv("example10speakers.csv")
### ### ### ### ### ### ### ### ### ### ### ### ### ### ### ### ### ###
#### SET THESE PARAMETERS #############################################
# (1) input the sampling rate of your F0 measures in milliseconds
time_step_ms = 10
#### ADJUST THESE THRESHOLDS IF DESIRED ####
# from Sundberg (1973), for 10 ms intervals and female speakers
rise_threshold = 1.2631578947
fall_threshold = 1.7142857143
time_mutation = time_step_ms/10
data %>% group_by(uniqueID) %>%
mutate(lead_F0_semitones= lead(F0_semitones, order_by=t_ms),
diff = lead_F0_semitones-F0_semitones,
err = ifelse(diff>0&(abs(diff)*time_mutation)>rise_threshold,1,
ifelse(diff<0&(abs(diff)*time_mutation)>fall_threshold,1,0)),
err_prop_by_ID = mean(err,na.rm = T),
err_count_by_ID = sum(err,na.rm = T),
err_in_ID=ifelse(err_prop_by_ID>0,1,0)) -> data_annotated
data_annotated %>%
group_by(uniqueID) %>%
select(uniqueID,err_prop_by_ID,err_count_by_ID,err_in_ID) %>% slice(1) -> data_summary_by_ID
data_summary_by_ID %>% filter(err_in_ID==1)->data_summary_by_ID_errors_only
data_annotated %>% group_by(speaker) %>%
mutate(err_prop_by_speaker = mean(err,na.rm = T),
err_count_by_speaker = sum(err,na.rm = T)) %>%
select(speaker,err_count_by_speaker,err_prop_by_speaker) %>% slice(1) -> data_summary_by_speaker
write.csv(data_summary_by_speaker,file="output_files/data_summary_by_speaker.csv")
write.csv(data_summary_by_ID,file="output_files/data_summary_by_ID.csv")
write.csv(data_summary_by_ID_errors_only,file="output_files/data_summary_by_ID_errors_only.csv")
write.csv(data_annotated,file="output_files/data_annotated.csv")
View(data_summary_by_ID)
View(data_summary_by_ID_errors_only)
data_summary_by_ID %>% filter(err_in_ID==1) %>%
select(-err_in_ID) ->data_summary_by_ID_errors_only
data_annotated %>% group_by(speaker) %>%
mutate(err_prop_by_speaker = mean(err,na.rm = T),
err_count_by_speaker = sum(err,na.rm = T)) %>%
select(speaker,err_count_by_speaker,err_prop_by_speaker) %>% slice(1) -> data_summary_by_speaker
View(data)
View(data_summary_by_speaker)
### required input:
### output
# this package required:
library(tidyverse)
# if not installed, use the following: install.packages("tidyverse")
# load in data here
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
data<-read.csv("example10speakers.csv")
### ### ### ### ### ### ### ### ### ### ### ### ### ### ### ### ### ###
#### SET THESE PARAMETERS #############################################
# (1) input the sampling rate of your F0 measures in milliseconds
time_step_ms = 10
## variable names
# input the names of the required variables in your data frame
# (2) name of F0 (in semitones): replace YOUR_VARIABLE_NAME_HERE with your variable
data$F0_semitones <- data$YOUR_VARIABLE_NAME_HERE
# (3) name of variable that identifies each unique trajectory
data$uniqueID <- data$YOUR_VARIABLE_NAME_HERE
# (3) name of variable that identifies time, in milliseconds
data$t_ms <- data$YOUR_VARIABLE_NAME_HERE
# (3) name of variable that identifies speaker, for optional speaker summary stats
data$speaker <- data$YOUR_VARIABLE_NAME_HERE
#### ADJUST THESE THRESHOLDS IF DESIRED ####
# from Sundberg (1973), for 10 ms intervals and female speakers
rise_threshold = 1.2631578947
fall_threshold = 1.7142857143
#######################################################################
### ### ### ### ### ### ### ### ### ### ### ### ### ### ### ### ### ###
## run the following the save outputs
time_mutation = time_step_ms/10
data %>% group_by(uniqueID) %>%
mutate(lead_F0_semitones= lead(F0_semitones, order_by=t_ms),
diff = lead_F0_semitones-F0_semitones,
err = ifelse(diff>0&(abs(diff)*time_mutation)>rise_threshold,1,
ifelse(diff<0&(abs(diff)*time_mutation)>fall_threshold,1,0)),
err_prop_by_ID = mean(err,na.rm = T),
err_count_by_ID = sum(err,na.rm = T),
err_in_ID=ifelse(err_prop_by_ID>0,1,0)) -> data_annotated
data_annotated %>%
group_by(uniqueID) %>%
select(uniqueID,err_prop_by_ID,err_count_by_ID,err_in_ID) %>% slice(1) -> data_summary_by_ID
data_summary_by_ID %>% filter(err_in_ID==1) %>%
select(-err_in_ID) ->data_summary_by_ID_errors_only
data_annotated %>% group_by(speaker) %>%
mutate(err_prop_by_speaker = mean(err,na.rm = T),
err_count_by_speaker = sum(err,na.rm = T)) %>%
select(speaker,err_count_by_speaker,err_prop_by_speaker) %>% slice(1) -> data_summary_by_speaker
write.csv(data_summary_by_speaker,file="output_files/data_summary_by_speaker.csv")
write.csv(data_summary_by_ID,file="output_files/data_summary_by_ID.csv")
write.csv(data_summary_by_ID_errors_only,file="output_files/data_summary_by_ID_errors_only.csv")
write.csv(data_annotated,file="output_files/data_annotated.csv")
## created by Jeremy Steffman
## last updated 11-2-21
##########################################################################################
## This script detects halving/doubling in F0 time-series measures, where you can set what ratios of adjacent sample values count as halving and doubling. The script will then annotate the file of interest, and create a file list those files containing halving/doubling errors.
## A particular data frame structure is required, see below.
## commented lines below explain each step.
## save files are put into the "output" folder.
##########################################################################################
### REQUIRES THIS PACKAGE ###############################################################
#install.packages("tidyverse") # uncomment and run if needed
#########################################################################################
library(tidyverse)
setwd(dirname(rstudioapi::getActiveDocumentContext()$path)) # set working directory to the folder this script is in-
###  demo data here##
data<-read.csv("demo_data.csv",sep = ",") # change filepath as needed- if you don't run line 14 above
##########################################################################################
# THIS SCRIPT ASSUMES that there are columns called (1) "Filename" (2) "t_ms" and (3) "F0"
## Filename must uniquely identify each F0 trajectory of interest. These are just numbers in the example file.
## t_ms should be a time-series.
## F0 should be measured F0, at each time.
##########################################################################################
data<-data %>%
group_by(Filename) %>%
mutate(lead_F0= lead(F0, order_by=t_ms),
ratio = lead_F0/F0,
halving = ifelse(0.52>ratio&ratio>0.48,1,0), # change 0.52/0.48 to adjust what range of ratios count as halving.  1 in the output means halving has occured.
doubling = ifelse(2.02>ratio&ratio>1.98,1,0), # change 2.02/1.98 to adjust what range of ratios count as doubling. 1 in the output means doubling has occured.
prose =ifelse(halving==1,"halving",ifelse(doubling==1,"doubling","neither")), # this column just says whether halving double or neither has happened for sample and the sample that follows it.
halving_mean = mean(halving,na.rm = TRUE), # prop. samples which halve/double
doubling_mean= mean(doubling,na.rm = TRUE),
halving_in_file=ifelse(halving_mean>0,1,0), # 1 if any samples in file halve, 0 otherwise
doubling_in_file=ifelse(doubling_mean>0,1,0))# 1 if any samples in file double, 0 otherwise
data %>% filter(halving_in_file==1|doubling_in_file==1) -> files_with_doubling_halving
# just files with either doubling or halving
file_list<-as.data.frame(unique(files_with_doubling_halving$Filename));colnames(file_list)<-"Filename" # this is a list of filenames for files that have either doubling or halving
# save files as csv if desired
write_csv(data,"output_files/annotated_data.csv") # the full data set
write_csv(files_with_doubling_halving,"output/annotated_data_with_doubling_halving.csv") # just the files with doubling or halving
write_csv(file_list,"output_files/file_list.csv") # list of file names that have doubling or halving
## created by Jeremy Steffman
## last updated 11-2-21
##########################################################################################
## This script detects halving/doubling in F0 time-series measures, where you can set what ratios of adjacent sample values count as halving and doubling. The script will then annotate the file of interest, and create a file list those files containing halving/doubling errors.
## A particular data frame structure is required, see below.
## commented lines below explain each step.
## save files are put into the "output" folder.
##########################################################################################
### REQUIRES THIS PACKAGE ###############################################################
#install.packages("tidyverse") # uncomment and run if needed
#########################################################################################
library(tidyverse)
setwd(dirname(rstudioapi::getActiveDocumentContext()$path)) # set working directory to the folder this script is in-
###  demo data here##
data<-read.csv("demo_data.csv",sep = ",") # change filepath as needed- if you don't run line 14 above
##########################################################################################
# THIS SCRIPT ASSUMES that there are columns called (1) "Filename" (2) "t_ms" and (3) "F0"
## Filename must uniquely identify each F0 trajectory of interest. These are just numbers in the example file.
## t_ms should be a time-series.
## F0 should be measured F0, at each time.
##########################################################################################
data<-data %>%
group_by(Filename) %>%
mutate(lead_F0= lead(F0, order_by=t_ms),
ratio = lead_F0/F0,
halving = ifelse(0.52>ratio&ratio>0.48,1,0), # change 0.52/0.48 to adjust what range of ratios count as halving.  1 in the output means halving has occured.
doubling = ifelse(2.02>ratio&ratio>1.98,1,0), # change 2.02/1.98 to adjust what range of ratios count as doubling. 1 in the output means doubling has occured.
prose =ifelse(halving==1,"halving",ifelse(doubling==1,"doubling","neither")), # this column just says whether halving double or neither has happened for sample and the sample that follows it.
halving_mean = mean(halving,na.rm = TRUE), # prop. samples which halve/double
doubling_mean= mean(doubling,na.rm = TRUE),
halving_in_file=ifelse(halving_mean>0,1,0), # 1 if any samples in file halve, 0 otherwise
doubling_in_file=ifelse(doubling_mean>0,1,0))# 1 if any samples in file double, 0 otherwise
data %>% filter(halving_in_file==1|doubling_in_file==1) -> files_with_doubling_halving
# just files with either doubling or halving
file_list<-as.data.frame(unique(files_with_doubling_halving$Filename));colnames(file_list)<-"Filename" # this is a list of filenames for files that have either doubling or halving
# save files as csv if desired
write_csv(data,"output_files/annotated_data.csv") # the full data set
write_csv(files_with_doubling_halving,"output_files/annotated_data_with_doubling_halving.csv") # just the files with doubling or halving
write_csv(file_list,"output_files/file_list.csv") # list of file names that have doubling or halving
### REQUIRES THIS PACKAGE ###############################################################
#install.packages("tidyverse") # uncomment and run if needed
#########################################################################################
library(tidyverse)
setwd(dirname(rstudioapi::getActiveDocumentContext()$path)) # set working directory to the folder this script is in-
###  demo data here##
data<-read.csv("example10speakers.csv",sep = ",") # change filepath as needed- if you don't run line 14 above
View(data)
## created by Jeremy Steffman
## last updated 11-2-21
##########################################################################################
## This script detects halving/doubling in F0 time-series measures, where you can set what ratios of adjacent sample values count as halving and doubling. The script will then annotate the file of interest, and create a file list those files containing halving/doubling errors.
## A particular data frame structure is required, see below.
## commented lines below explain each step.
## save files are put into the "output" folder.
##########################################################################################
### REQUIRES THIS PACKAGE ###############################################################
#install.packages("tidyverse") # uncomment and run if needed
#########################################################################################
library(tidyverse)
setwd(dirname(rstudioapi::getActiveDocumentContext()$path)) # set working directory to the folder this script is in-
###  demo data here##
data<-read.csv("example10speakers.csv",sep = ",") # change filepath as needed- if you don't run line 14 above
##########################################################################################
# THIS SCRIPT ASSUMES that there are columns called (1) "uniqueID" (2) "t_ms" and (3) "F0"
## uniqueID must uniquely identify each F0 trajectory of interest. These are just numbers in the example file.
## t_ms should be a time-series.
## F0 should be measured F0, at each time.
##########################################################################################
data<-data %>%
group_by(uniqueID) %>%
mutate(lead_F0= lead(F0_Hz, order_by=t_ms),
ratio = lead_F0/F0_Hz,
halving = ifelse(0.52>ratio&ratio>0.48,1,0), # change 0.52/0.48 to adjust what range of ratios count as halving.  1 in the output means halving has occured.
doubling = ifelse(2.02>ratio&ratio>1.98,1,0), # change 2.02/1.98 to adjust what range of ratios count as doubling. 1 in the output means doubling has occured.
prose =ifelse(halving==1,"halving",ifelse(doubling==1,"doubling","neither")), # this column just says whether halving double or neither has happened for sample and the sample that follows it.
halving_mean = mean(halving,na.rm = TRUE), # prop. samples which halve/double
doubling_mean= mean(doubling,na.rm = TRUE),
halving_in_file=ifelse(halving_mean>0,1,0), # 1 if any samples in file halve, 0 otherwise
doubling_in_file=ifelse(doubling_mean>0,1,0))# 1 if any samples in file double, 0 otherwise
data %>% filter(halving_in_file==1|doubling_in_file==1) -> files_with_doubling_halving
# just files with either doubling or halving
file_list<-as.data.frame(unique(files_with_doubling_halving$uniqueID));colnames(file_list)<-"uniqueID" # this is a list of uniqueIDs for files that have either doubling or halving
# save files as csv if desired
write_csv(data,"output_files/annotated_data.csv") # the full data set
write_csv(files_with_doubling_halving,"output_files/annotated_data_with_doubling_halving.csv") # just the files with doubling or halving
write_csv(file_list,"output_files/file_list.csv") # list of file names that have doubling or halving
## created by Jeremy Steffman
## last updated 11-2-21
##########################################################################################
## This script detects halving/doubling in F0 time-series measures, where you can set what ratios of adjacent sample values count as halving and doubling. The script will then annotate the file of interest, and create a file list those files containing halving/doubling errors.
## A particular data frame structure is required, see below.
## commented lines below explain each step.
## save files are put into the "output" folder.
##########################################################################################
### REQUIRES THIS PACKAGE ###############################################################
#install.packages("tidyverse") # uncomment and run if needed
#########################################################################################
library(tidyverse)
setwd(dirname(rstudioapi::getActiveDocumentContext()$path)) # set working directory to the folder this script is in-
###  demo data here##
data<-read.csv("example10speakers.csv",sep = ",") # change filepath as needed- if you don't run line 14 above
##########################################################################################
# THIS SCRIPT ASSUMES that there are columns called (1) "uniqueID" (2) "t_ms" and (3) "F0"
## uniqueID must uniquely identify each F0 trajectory of interest. These are just numbers in the example file.
## t_ms should be a time-series.
## F0 should be measured F0, at each time.
##########################################################################################
data<-data %>%
group_by(uniqueID) %>%
mutate(lead_F0= lead(F0_Hz, order_by=t_ms),
ratio = lead_F0/F0_Hz,
halving = ifelse(0.52>ratio&ratio>0.48,1,0), # change 0.52/0.48 to adjust what range of ratios count as halving.  1 in the output means halving has occured.
doubling = ifelse(2.02>ratio&ratio>1.98,1,0), # change 2.02/1.98 to adjust what range of ratios count as doubling. 1 in the output means doubling has occured.
prose =ifelse(halving==1,"halving",ifelse(doubling==1,"doubling","neither")), # this column just says whether halving double or neither has happened for sample and the sample that follows it.
halving_mean = mean(halving,na.rm = TRUE), # prop. samples which halve/double
doubling_mean= mean(doubling,na.rm = TRUE),
halving_in_file=ifelse(halving_mean>0,1,0), # 1 if any samples in file halve, 0 otherwise
doubling_in_file=ifelse(doubling_mean>0,1,0))# 1 if any samples in file double, 0 otherwise
data %>% filter(halving_in_file==1|doubling_in_file==1) -> files_with_doubling_halving
# just files with either doubling or halving
file_list<-as.data.frame(unique(files_with_doubling_halving$uniqueID));colnames(file_list)<-"uniqueID" # this is a list of uniqueIDs for files that have either doubling or halving
# save files as csv if desired
write_csv(data,"output_files/annotated_data.csv") # the full data set
write_csv(files_with_doubling_halving,"output_files/annotated_data_with_doubling_halving.csv") # just the files with doubling or halving
write_csv(file_list,"output_files/file_list.csv") # list of file names that have doubling or halving
###  demo data here##
data<-read.csv("demo_data.csv",sep = ",") # change filepath as needed- if you don't run line 14 above
## created by Jeremy Steffman
## last updated 11-2-21
##########################################################################################
## This script detects halving/doubling in F0 time-series measures, where you can set what ratios of adjacent sample values count as halving and doubling. The script will then annotate the file of interest, and create a file list those files containing halving/doubling errors.
## A particular data frame structure is required, see below.
## commented lines below explain each step.
## save files are put into the "output" folder.
##########################################################################################
### REQUIRES THIS PACKAGE ###############################################################
#install.packages("tidyverse") # uncomment and run if needed
#########################################################################################
library(tidyverse)
setwd(dirname(rstudioapi::getActiveDocumentContext()$path)) # set working directory to the folder this script is in-
###  demo data here##
data<-read.csv("demo_data.csv",sep = ",") # change filepath as needed- if you don't run line 14 above
##########################################################################################
# THIS SCRIPT ASSUMES that there are columns called (1) "uniqueID" (2) "t_ms" and (3) "F0"
## uniqueID must uniquely identify each F0 trajectory of interest. These are just numbers in the example file.
## t_ms should be a time-series.
## F0 should be measured F0, at each time.
##########################################################################################
data<-data %>%
group_by(uniqueID) %>%
mutate(lead_F0= lead(F0_Hz, order_by=t_ms),
ratio = lead_F0/F0_Hz,
halving = ifelse(0.52>ratio&ratio>0.48,1,0), # change 0.52/0.48 to adjust what range of ratios count as halving.  1 in the output means halving has occured.
doubling = ifelse(2.02>ratio&ratio>1.98,1,0), # change 2.02/1.98 to adjust what range of ratios count as doubling. 1 in the output means doubling has occured.
prose =ifelse(halving==1,"halving",ifelse(doubling==1,"doubling","neither")), # this column just says whether halving double or neither has happened for sample and the sample that follows it.
halving_mean = mean(halving,na.rm = TRUE), # prop. samples which halve/double
doubling_mean= mean(doubling,na.rm = TRUE),
halving_in_file=ifelse(halving_mean>0,1,0), # 1 if any samples in file halve, 0 otherwise
doubling_in_file=ifelse(doubling_mean>0,1,0))# 1 if any samples in file double, 0 otherwise
data %>% filter(halving_in_file==1|doubling_in_file==1) -> files_with_doubling_halving
# just files with either doubling or halving
file_list<-as.data.frame(unique(files_with_doubling_halving$uniqueID));colnames(file_list)<-"uniqueID" # this is a list of uniqueIDs for files that have either doubling or halving
# save files as csv if desired
write_csv(data,"output_files/annotated_data.csv") # the full data set
write_csv(files_with_doubling_halving,"output_files/annotated_data_with_doubling_halving.csv") # just the files with doubling or halving
write_csv(file_list,"output_files/file_list.csv") # list of file names that have doubling or halving
###############################################
# this script detects sudden jumps in F0
# which are likely to be F0 measurement errors.
# created by:  Jeremy Steffman
# last updated: April 29, 2022
##############################################
### required input:
# long format data with the following columns
# -F0 in semitones
# -time in ms (can be at any interval, e.g., 1ms, 10ms, 100ms)
# -a column which uniquely identifies each trajectory
# -an optional column that contains speaker information.
### output
# - an annotated data frame which flags all sample to sample errors
# - a summary of flagged errors by unique identifier
# - a summary of flagged errors by unique identifier ONLY for files which were flagged as errors
# - a summary of errors by speaker, if the speaker column is specified
# this package required:
library(tidyverse)
# if not installed, use the following: install.packages("tidyverse")
# load in data here
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
data<-read.csv("example10speakers.csv") # change to be your data name
### ### ### ### ### ### ### ### ### ### ### ### ### ### ### ### ### ###
#### SET THESE PARAMETERS #############################################
# (1) input the sampling rate of your F0 measures in milliseconds
time_step_ms = 10
## variable names
# input the names of the required variables in your data frame
# (2) name of F0 (in semitones): replace YOUR_VARIABLE_NAME_HERE with your variable
data$F0_semitones <- data$YOUR_VARIABLE_NAME_HERE
# (3) name of variable that identifies each unique trajectory
data$uniqueID <- data$YOUR_VARIABLE_NAME_HERE
# (3) name of variable that identifies time, in milliseconds
data$t_ms <- data$YOUR_VARIABLE_NAME_HERE
# (3) name of variable that identifies speaker, for optional speaker summary stats
data$speaker <- data$YOUR_VARIABLE_NAME_HERE
#### ADJUST THESE THRESHOLDS IF DESIRED ####
# from Sundberg (1973), for 10 ms temporal intervals and female speakers
rise_threshold = 1.2631578947
fall_threshold = 1.7142857143
#######################################################################
### ### ### ### ### ### ### ### ### ### ### ### ### ### ### ### ### ###
## run the rest of the scrip to annotate the data frame and  the save the outputs
time_mutation = time_step_ms/10
data %>% group_by(uniqueID) %>%
mutate(lead_F0_semitones= lead(F0_semitones, order_by=t_ms),
diff = lead_F0_semitones-F0_semitones,
err = ifelse(diff>0&(abs(diff)*time_mutation)>rise_threshold,1,
ifelse(diff<0&(abs(diff)*time_mutation)>fall_threshold,1,0)),
err_prop_by_ID = mean(err,na.rm = T),
err_count_by_ID = sum(err,na.rm = T),
err_in_ID=ifelse(err_prop_by_ID>0,1,0)) -> data_annotated
data_annotated %>%
group_by(uniqueID) %>%
select(uniqueID,err_prop_by_ID,err_count_by_ID,err_in_ID) %>% slice(1) -> data_summary_by_ID
data_summary_by_ID %>% filter(err_in_ID==1) %>%
select(-err_in_ID) ->data_summary_by_ID_errors_only
data_annotated %>% group_by(speaker) %>%
mutate(err_prop_by_speaker = mean(err,na.rm = T),
err_count_by_speaker = sum(err,na.rm = T)) %>%
select(speaker,err_count_by_speaker,err_prop_by_speaker) %>% slice(1) -> data_summary_by_speaker
write.csv(data_summary_by_speaker,file="output_files/data_summary_by_speaker.csv")
write.csv(data_summary_by_ID,file="output_files/data_summary_by_ID.csv")
write.csv(data_summary_by_ID_errors_only,file="output_files/data_summary_by_ID_errors_only.csv")
write.csv(data_annotated,file="output_files/data_annotated.csv")
###############################################
# this script detects sudden jumps in F0
# which are likely to be F0 measurement errors.
# created by:  Jeremy Steffman
# last updated: April 29, 2022
##############################################
### required input:
# long format data with the following columns
# -F0 in semitones
# -time in ms (can be at any interval, e.g., 1ms, 10ms, 100ms)
# -a column which uniquely identifies each trajectory
# -an optional column that contains speaker information.
### output
# - an annotated data frame which flags all sample to sample errors
# - a summary of flagged errors by unique identifier
# - a summary of flagged errors by unique identifier ONLY for files which were flagged as errors
# - a summary of errors by speaker, if the speaker column is specified
# this package required:
library(tidyverse)
# if not installed, use the following: install.packages("tidyverse")
# load in data here
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
data<-read.csv("example10speakers.csv") # change to be your data name
### ### ### ### ### ### ### ### ### ### ### ### ### ### ### ### ### ###
#### SET THESE PARAMETERS #############################################
# (1) input the sampling rate of your F0 measures in milliseconds
time_step_ms = 10
###############################################
# this script detects sudden jumps in F0
# which are likely to be F0 measurement errors.
# created by:  Jeremy Steffman
# last updated: April 29, 2022
##############################################
### required input:
# long format data with the following columns
# -F0 in semitones
# -time in ms (can be at any interval, e.g., 1ms, 10ms, 100ms)
# -a column which uniquely identifies each trajectory
# -an optional column that contains speaker information.
### output
# - an annotated data frame which flags all sample to sample errors
# - a summary of flagged errors by unique identifier
# - a summary of flagged errors by unique identifier ONLY for files which were flagged as errors
# - a summary of errors by speaker, if the speaker column is specified
# this package required:
library(tidyverse)
# if not installed, use the following: install.packages("tidyverse")
# load in data here
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
data<-read.csv("example10speakers.csv") # change to be your data name
### ### ### ### ### ### ### ### ### ### ### ### ### ### ### ### ### ###
#### SET THESE PARAMETERS #############################################
# (1) input the sampling rate of your F0 measures in milliseconds
time_step_ms = 10
#### ADJUST THESE THRESHOLDS IF DESIRED ####
# from Sundberg (1973), for 10 ms temporal intervals and female speakers
rise_threshold = 1.2631578947
fall_threshold = 1.7142857143
time_mutation = time_step_ms/10
data %>% group_by(uniqueID) %>%
mutate(lead_F0_semitones= lead(F0_semitones, order_by=t_ms),
diff = lead_F0_semitones-F0_semitones,
err = ifelse(diff>0&(abs(diff)*time_mutation)>rise_threshold,1,
ifelse(diff<0&(abs(diff)*time_mutation)>fall_threshold,1,0)),
err_prop_by_ID = mean(err,na.rm = T),
err_count_by_ID = sum(err,na.rm = T),
err_in_ID=ifelse(err_prop_by_ID>0,1,0)) -> data_annotated
data_annotated %>%
group_by(uniqueID) %>%
select(uniqueID,err_prop_by_ID,err_count_by_ID,err_in_ID) %>% slice(1) -> data_summary_by_ID
data_summary_by_ID %>% filter(err_in_ID==1) %>%
select(-err_in_ID) ->data_summary_by_ID_errors_only
data_annotated %>% group_by(speaker) %>%
mutate(err_prop_by_speaker = mean(err,na.rm = T),
err_count_by_speaker = sum(err,na.rm = T)) %>%
select(speaker,err_count_by_speaker,err_prop_by_speaker) %>% slice(1) -> data_summary_by_speaker
write.csv(data_summary_by_speaker,file="output_files/data_summary_by_speaker.csv")
write.csv(data_summary_by_ID,file="output_files/data_summary_by_ID.csv")
write.csv(data_summary_by_ID_errors_only,file="output_files/data_summary_by_ID_errors_only.csv")
write.csv(data_annotated,file="output_files/data_annotated.csv")
