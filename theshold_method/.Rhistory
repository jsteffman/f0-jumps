err = ifelse(diff>0&(abs(diff)*time_mutation)>rise_threshold,1,
ifelse(diff<0&(abs(diff)*time_mutation)>fall_threshold,1,0)),
err_prop_by_ID = mean(err,na.rm = T),
err_count_by_ID = sum(err,na.rm = T),
err_in_ID=ifelse(err_prop_by_ID>0,1,0)) -> data_annotated
data_annotated %>% group_by(uniqueID) %>%
mutate(max_diff = max(diff,na.rm = T)) %>% slice(1) -> data_diffs
data_annotated %>%
group_by(uniqueID) %>%
select(uniqueID,err_prop_by_ID,err_count_by_ID,err_in_ID) %>% slice(1) -> data_summary_by_ID
mean(data_summary_by_ID$err_in_ID)
data_summary_by_ID %>% filter(err_in_ID==1) %>%
select(-err_in_ID) ->data_summary_by_ID_errors_only
data_annotated %>% group_by(speaker) %>%
mutate(err_prop_by_speaker = mean(err,na.rm = T),
err_count_by_speaker = sum(err,na.rm = T)) %>%
select(speaker,err_count_by_speaker,err_prop_by_speaker) %>% slice(1) -> data_summary_by_speaker
View(data_diffs)
# load in data here
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
data<-read.delim("s14_semi_70_250.txt") # change to be your data name
# load in data here
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
data<-read.delim("s14_semi_70_250.txt") # change to be your data name
View(data)
time_mutation = time_step_ms/10
data %>% group_by(uniqueID) %>%
mutate(lead_F0_semitones= lead(F0_semitones, order_by=t_ms),
diff = lead_F0_semitones-F0_semitones,
err = ifelse(diff>0&(abs(diff)*time_mutation)>rise_threshold,1,
ifelse(diff<0&(abs(diff)*time_mutation)>fall_threshold,1,0)),
err_prop_by_ID = mean(err,na.rm = T),
err_count_by_ID = sum(err,na.rm = T),
err_in_ID=ifelse(err_prop_by_ID>0,1,0)) -> data_annotated
## TRY ten ms
## or look at diffs
#creating a unique ID for each vowel
#rawdata_F0 %>% mutate(uniqueID = (ifelse(grepl("VV", Label, fixed = TRUE), str_sub(Label,-3,-1), str_sub(Label,-5,-1)))) -> rawdata_F0
library(tidyverse)
library(hqmisc)
# semi tone stuff, how to do this w/o normtime?
#write.csv(rawdata_F0, "~/Documents/UW_Madison/IRB Mixtec 2021/Mixtec_Recordings_April22/speaker14/semitone_s14.csv", row.names = FALSE)
# this package required:
# if not installed, use the following: install.packages("tidyverse")
# load in data here
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
data<-read.delim("s14_semi_70_250.txt") # change to be your data name
#colnames(data)<-c("Speaker", "Label", "t_ms", "F0")
### ### ### ### ### ### ### ### ### ### ### ### ### ### ### ### ### ###
#### SET THESE PARAMETERS #############################################
# (1) input the sampling rate of your F0 measures in milliseconds
time_step_ms = 1
## variable names
# input the names of the required variables in your data frame
# (2) name of F0 (in semitones): replace YOUR_VARIABLE_NAME_HERE with your variable
# (3) name of variable that identifies each unique trajectory
data$uniqueID %>%
data$uniqueID <- data$Label
# (3) name of variable that identifies time, in milliseconds
data$t_ms <- data$t_ms
# (3) name of variable that identifies speaker, for optional speaker summary stats
data$speaker <- data$Speaker  #just doing one speaker
data$F0 <- data$strF0  #just doing one speaker
data<-data %>%
mutate(Semi = f2st(F0, base=50 ))
data$F0_semitones <- data$Semi
#### ADJUST THESE THRESHOLDS IF DESIRED ####
# from Sundberg (1973), for 10 ms temporal intervals and female speakers
rise_threshold = 1.2631578947
fall_threshold = 1.7142857143
#######################################################################
### ### ### ### ### ### ### ### ### ### ### ### ### ### ### ### ### ###
## run the rest of the scrip to annotate the data frame and  the save the outputs
time_mutation = time_step_ms/10
data %>% group_by(uniqueID) %>%
mutate(lead_F0_semitones= lead(F0_semitones, order_by=t_ms),
diff = lead_F0_semitones-F0_semitones,
err = ifelse(diff>0&(abs(diff)*time_mutation)>rise_threshold,1,
ifelse(diff<0&(abs(diff)*time_mutation)>fall_threshold,1,0)),
err_prop_by_ID = mean(err,na.rm = T),
err_count_by_ID = sum(err,na.rm = T),
err_in_ID=ifelse(err_prop_by_ID>0,1,0)) -> data_annotated
## TRY ten ms
## or look at diffs
#creating a unique ID for each vowel
#rawdata_F0 %>% mutate(uniqueID = (ifelse(grepl("VV", Label, fixed = TRUE), str_sub(Label,-3,-1), str_sub(Label,-5,-1)))) -> rawdata_F0
library(tidyverse)
library(hqmisc)
# semi tone stuff, how to do this w/o normtime?
#write.csv(rawdata_F0, "~/Documents/UW_Madison/IRB Mixtec 2021/Mixtec_Recordings_April22/speaker14/semitone_s14.csv", row.names = FALSE)
# this package required:
# if not installed, use the following: install.packages("tidyverse")
# load in data here
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
data<-read.delim("s14_semi_70_250.txt") # change to be your data name
#colnames(data)<-c("Speaker", "Label", "t_ms", "F0")
### ### ### ### ### ### ### ### ### ### ### ### ### ### ### ### ### ###
#### SET THESE PARAMETERS #############################################
# (1) input the sampling rate of your F0 measures in milliseconds
time_step_ms = 1
## variable names
# input the names of the required variables in your data frame
# (2) name of F0 (in semitones): replace YOUR_VARIABLE_NAME_HERE with your variable
# (3) name of variable that identifies each unique trajectory
data$uniqueID %>%
data$uniqueID <- data$Label
# (3) name of variable that identifies time, in milliseconds
data$t_ms <- data$t_ms
# (3) name of variable that identifies speaker, for optional speaker summary stats
data$speaker <- data$Speaker  #just doing one speaker
data$F0 <- data$strF0  #just doing one speaker
data<-data %>%
mutate(Semi = f2st(F0, base=50 ))
data$F0_semitones <- data$Semi
#### ADJUST THESE THRESHOLDS IF DESIRED ####
# from Sundberg (1973), for 10 ms temporal intervals and female speakers
rise_threshold = 1.2631578947
fall_threshold = 1.7142857143
time_mutation = time_step_ms/10
data %>% group_by(uniqueID) %>%
mutate(lead_F0_semitones= lead(F0_semitones, order_by=t_ms),
diff = lead_F0_semitones-F0_semitones,
err = ifelse(diff>0&(abs(diff)*time_mutation)>rise_threshold,1,
ifelse(diff<0&(abs(diff)*time_mutation)>fall_threshold,1,0)),
err_prop_by_ID = mean(err,na.rm = T),
err_count_by_ID = sum(err,na.rm = T),
err_in_ID=ifelse(err_prop_by_ID>0,1,0)) -> data_annotated
data$uniqueID %>%
data$uniqueID <- data$Label
data$uniqueID <- data$Label
# (3) name of variable that identifies time, in milliseconds
data$t_ms <- data$t_ms
# (3) name of variable that identifies speaker, for optional speaker summary stats
data$speaker <- data$Speaker  #just doing one speaker
data$F0 <- data$strF0  #just doing one speaker
data<-data %>%
mutate(Semi = f2st(F0, base=50 ))
View(data)
data$F0_semitones <- data$Semi
#### ADJUST THESE THRESHOLDS IF DESIRED ####
# from Sundberg (1973), for 10 ms temporal intervals and female speakers
rise_threshold = 1.2631578947
fall_threshold = 1.7142857143
time_mutation = time_step_ms/10
data %>% group_by(uniqueID) %>%
mutate(lead_F0_semitones= lead(F0_semitones, order_by=t_ms),
diff = lead_F0_semitones-F0_semitones,
err = ifelse(diff>0&(abs(diff)*time_mutation)>rise_threshold,1,
ifelse(diff<0&(abs(diff)*time_mutation)>fall_threshold,1,0)),
err_prop_by_ID = mean(err,na.rm = T),
err_count_by_ID = sum(err,na.rm = T),
err_in_ID=ifelse(err_prop_by_ID>0,1,0)) -> data_annotated
data_annotated %>% group_by(uniqueID) %>%
mutate(max_diff = max(diff,na.rm = T)) %>% slice(1) -> data_diffs
data_annotated %>%
group_by(uniqueID) %>%
select(uniqueID,err_prop_by_ID,err_count_by_ID,err_in_ID) %>% slice(1) -> data_summary_by_ID
mean(data_summary_by_ID$err_in_ID)
data_summary_by_ID %>% filter(err_in_ID==1) %>%
select(-err_in_ID) ->data_summary_by_ID_errors_only
View(data_diffs)
# load in data here
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
data<-read.csv("example10speakers.csv") # change to be your data
### ### ### ### ### ### ### ### ### ### ### ### ### ### ### ### ### ###
#### SET THESE PARAMETERS #############################################
# (1) input the sampling rate of your F0 measures in milliseconds
time_step_ms = 10
## variable names
# input the names of the required variables in your data frame
# (2) name of the column containing F0 (in semitones, and Hz): replace YOUR_VARIABLE_NAME_HERE with your variable
data$F0_semitones <- data$F0_semitones
data$F0_Hz<-data$F0_Hz
# (3) name of variable that identifies each unique trajectory
data$uniqueID <- data$uniqueID
# (3) name of variable that identifies time, in milliseconds
data$t_ms <- data$t_ms
# (3) name of variable that identifies speaker, for optional speaker summary statistics
data$speaker <- data$speaker
#### ADJUST THESE THRESHOLDS IF DESIRED ####
# from Sundberg (1973), for 10 ms temporal intervals and female speakers
rise_threshold = 1.2631578947
fall_threshold = 1.7142857143
time_mutation = time_step_ms/10
data %>% group_by(uniqueID) %>%
mutate(lead_F0_semitones= lead(F0_semitones, order_by=t_ms),
lead_F0_Hz= lead(F0_Hz, order_by=t_ms),
diff = lead_F0_semitones-F0_semitones,
ratio_Hz = lead_F0_Hz/F0_Hz,
oct_jump = ifelse(ratio_Hz<0.49|ratio_Hz>1.99,1,0), # halving and doubling ratios for octave jump detection
err = ifelse(diff>0&(abs(diff)*time_mutation)>rise_threshold,1,
ifelse(diff<0&(abs(diff)*time_mutation)>fall_threshold,1,0)),
err_prop_by_ID = mean(err,na.rm = T),
err_count_by_ID = sum(err,na.rm = T),
err_in_ID=ifelse(err_prop_by_ID>0,1,0),
time_of_err = ifelse(err_in_ID==1&err==1,t_ms,0),
F0_of_err = ifelse(lag(err)==1,F0_semitones,0),
# compute octave jumps
oct_jump_prop_by_ID = mean(oct_jump,na.rm = T),
oct_jump_count_by_ID = sum(oct_jump,na.rm = T),
oct_jump_in_ID= ifelse(err_prop_by_ID>0,1,0)) %>%
mutate_if(is.numeric, ~replace(., is.na(.), 0))-> data_annotated
data_annotated %>% group_by(uniqueID) %>%
mutate(nrow=n(),
carryover_err_start = ifelse(lag(err)==1,1,0),
carryover_err = carryover_err_start) ->data_annotated
# this package required:
library(tidyverse)
# load in data here
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
data<-read.csv("example10speakers.csv") # change to be your data
### ### ### ### ### ### ### ### ### ### ### ### ### ### ### ### ### ###
#### SET THESE PARAMETERS #############################################
# (1) input the sampling rate of your F0 measures in milliseconds
time_step_ms = 10
## variable names
# input the names of the required variables in your data frame
# (2) name of the column containing F0 (in semitones, and Hz): replace YOUR_VARIABLE_NAME_HERE with your variable
data$F0_semitones <- data$F0_semitones
data$F0_Hz<-data$F0_Hz
# (3) name of variable that identifies each unique trajectory
data$uniqueID <- data$uniqueID
# (3) name of variable that identifies time, in milliseconds
data$t_ms <- data$t_ms
# (3) name of variable that identifies speaker, for optional speaker summary statistics
data$speaker <- data$speaker
#### ADJUST THESE THRESHOLDS IF DESIRED ####
# from Sundberg (1973), for 10 ms temporal intervals and female speakers
rise_threshold = 1.2631578947
fall_threshold = 1.7142857143
time_mutation = time_step_ms/10
data %>% group_by(uniqueID) %>%
mutate(lead_F0_semitones= lead(F0_semitones, order_by=t_ms),
lead_F0_Hz= lead(F0_Hz, order_by=t_ms),
diff = lead_F0_semitones-F0_semitones,
ratio_Hz = lead_F0_Hz/F0_Hz,
oct_jump = ifelse(ratio_Hz<0.49|ratio_Hz>1.99,1,0), # halving and doubling ratios for octave jump detection
err = ifelse(diff>0&(abs(diff)*time_mutation)>rise_threshold,1,
ifelse(diff<0&(abs(diff)*time_mutation)>fall_threshold,1,0)),
err_prop_by_ID = mean(err,na.rm = T),
err_count_by_ID = sum(err,na.rm = T),
err_in_ID=ifelse(err_prop_by_ID>0,1,0),
time_of_err = ifelse(err_in_ID==1&err==1,t_ms,0),
F0_of_err = ifelse(lag(err)==1,F0_semitones,0),
# compute octave jumps
oct_jump_prop_by_ID = mean(oct_jump,na.rm = T),
oct_jump_count_by_ID = sum(oct_jump,na.rm = T),
oct_jump_in_ID= ifelse(err_prop_by_ID>0,1,0)) %>%
mutate_if(is.numeric, ~replace(., is.na(.), 0))-> data_annotated
data_annotated %>% group_by(uniqueID) %>%
mutate(nrow=n(),
carryover_err_start = ifelse(lag(err)==1,1,0),
carryover_err = carryover_err_start) ->data_annotated
x1 =1
repeat {
data_annotated %>% group_by(uniqueID) %>%
mutate(F0_of_err=ifelse(F0_of_err == 0,lag(F0_of_err,order_by = t_ms),F0_of_err)) -> data_annotated
x1 = x1+1
print(paste0(round(x1/max(data_annotated$nrow)*100,0), "% done"))
if (x1 == max(data_annotated$nrow)){
break
}
}
data_annotated$F0_of_err[is.na(data_annotated$F0_of_err)] <- 0
x2=1
repeat {
data_annotated %>% group_by(uniqueID) %>%
mutate(carryover_err =
ifelse(lag(carryover_err)==1&
(lead(F0_semitones)>F0_semitones)&
abs(F0_semitones-F0_of_err)<rise_threshold*1.5|
lag(carryover_err)==1&
(lead(F0_semitones)<F0_semitones)&
abs(F0_semitones-F0_of_err)<fall_threshold*1.5,1,carryover_err))-> data_annotated
x2 = x2+1
print(paste0(round(x2/max(data_annotated$nrow)*100,0), "% done"))
if (x2 == max(data_annotated$nrow)){
break
}
}
data_annotated$carryover_err[is.na(data_annotated$carryover_err)] <- 0
data_annotated %>% group_by(uniqueID) %>%
mutate(mean_carryover_err= mean(carryover_err),
carryover_err = ifelse(t_ms==max(t_ms)&lag(carryover_err)==1,1,carryover_err)) -> data_annotated
# this will plot carryover errors if desired
data_annotated %>% filter(err_in_ID==1) %>%
ggplot(aes(x=t_ms,y=F0_semitones,shape=as.factor(err),color=as.factor(carryover_err)))+
geom_point()+facet_wrap(~uniqueID,scale="free")
# this will plot carryover errors if desired
data_annotated %>% filter(err_in_ID==1) %>%
filter(uniqueID=="15187_MADELYN_MFF_Helean_058_llh")%>%
ggplot(aes(x=t_ms,y=F0_semitones,shape=as.factor(err),color=as.factor(carryover_err)))+
geom_point()+facet_wrap(~uniqueID,scale="free")
# this will plot carryover errors if desired
data_annotated %>% filter(err_in_ID==1) %>%
filter(uniqueID=="15817_MADELYN_MFF_Helean_058_llh")%>%
ggplot(aes(x=t_ms,y=F0_semitones,shape=as.factor(err),color=as.factor(carryover_err)))+
geom_point()+facet_wrap(~uniqueID,scale="free")
# this will plot carryover errors if desired
data_annotated %>% filter(err_in_ID==1) %>%
filter(uniqueID=="15187_MADELYN_MFF_Helena_058_llh"|
uniqueID=="15763_MELANIE_MMF_Helena_108_lll")%>%
ggplot(aes(x=t_ms,y=F0_semitones,shape=as.factor(err),color=as.factor(carryover_err)))+
geom_point()+facet_wrap(~uniqueID,scale="free")
# this will plot carryover errors if desired
data_annotated %>% filter(err_in_ID==1) ->TEST
levels(TEST$uniqueID)
levels(as.factor(TEST$uniqueID))
data_annotated %>% filter(err_in_ID==1) %>%
filter(uniqueID=="15187_MADELYN_MFF_Helena_058_llh"|
uniqueID=="15763_MELANIE_MMF_Helena_108_lll")%>%
ggplot(aes(x=t_ms,y=F0_semitones,shape=as.factor(err),color=as.factor(carryover_err)))+
geom_point()+facet_wrap(~uniqueID,scale="free")
theme_set(theme_minimal(9))
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
library(tidyverse);library(cowplot)
theme_set(theme_minimal())
read.csv("basic8_data.csv") ->data
read.csv("errors.csv") ->data_errors
read.csv("dprime_data.csv") ->  dprime_data
read.csv("setting_comp.csv") ->  settings
read.csv("Fscores.csv") ->  Fscores
settings %>% filter(metric!="oct_jump_in_trial") -> settings_no_oct
ggplot(data,aes(x=prop_dur,y=erbc,color=tune))+
stat_summary(fun=mean,geom="line",lty=1,alpha=0.25,aes(group=id_tune))+
stat_summary(fun=mean,geom="line",color="black",lty=2)+
theme(text = element_text(family = "Times New Roman"))+
theme(axis.text.x=element_blank(),strip.text.x = element_blank())+
#ggtitle("Speaker means")+
xlab("prop. word duration (normalized time)")+ylab("scaled ERB")+facet_wrap(~tune,nrow =  1)+theme(legend.position = "none") -> means
theme_set(theme_minimal())
levels(as.factor(data_errors$speaker))
sort(with(data_errors,tapply(STerr,speaker,mean)))
data_errors %>%
filter(speaker =="8542"|
speaker== "6580"|
speaker== "5ebe"|
speaker== "11749"
) %>%
ggplot(aes(x= normtime/30,y=f0,alpha= as.factor(STerr),color=as.factor(STerr),group=paste0(STerr,label)))+
ylab("F0")+
xlab("prop. word duration (normalized time)")+
theme(text = element_text(family = "Times New Roman"),legend.position = "none")+
theme(axis.text.x=element_blank(),strip.text.x = element_blank())+
scale_alpha_manual(values = c(0.2,0.7))+
scale_color_manual(values=c("gray50","firebrick4"))+
geom_line()+facet_wrap(~speaker,scales="free",nrow=1) -> example_speakers
jpeg(file = "means.jpg",res = 300,height=1,width =6,units="in")
means
dev.off()
jpeg(file = "examples.jpg",res = 300,height=1.5,width =6,units="in")
example_speakers
dev.off()
library(plyr)
hitbar <- ddply(settings_no_oct, c("gender_specific_thresholds", "errors_allowed","threshold","rise_fall"), summarise, hit_sum = sum(hit))
FA_bar <- ddply(settings_no_oct, c("gender_specific_thresholds", "errors_allowed","threshold","rise_fall"), summarise, FA_sum = sum(FA))
miss_bar <- ddply(settings_no_oct, c("gender_specific_thresholds", "errors_allowed","threshold","rise_fall"), summarise, miss_sum = sum(miss))
CR_bar <- ddply(settings_no_oct, c("gender_specific_thresholds", "errors_allowed","threshold","rise_fall"), summarise, CR_sum = sum(CR))
library(ggthemes)
#theme_set(theme_minimal(9))
plot_grid(
hitbar %>%  filter(threshold=="not trained singer") %>%
mutate(gender_specific_thresholds = ifelse(gender_specific_thresholds=="yes","gender-specific  \n thresholds","uniform \n thresholds")) %>%
ggplot(aes(x=factor(errors_allowed),fill=rise_fall,y=hit_sum))+
ggtitle("hits")+
ylab("number of hits")+
xlab("sample-to-sample errors tolerated")+
geom_bar(stat = "identity",position="dodge")+ theme(legend.position = "none",text = element_text(family = "Times New Roman"),plot.title = element_text(hjust = 0.5))+ylim(0,510)+
scale_fill_ptol()+
facet_grid(~gender_specific_thresholds),
FA_bar %>% filter(threshold=="not trained singer") %>%
mutate(gender_specific_thresholds = ifelse(gender_specific_thresholds=="yes","gender-specific \n thresholds","uniform \n thresholds")) %>%
ggplot(
aes(x=factor(errors_allowed),fill=rise_fall,y=FA_sum))+
ylim(0,100)+
ylab("number of false alarms")+
xlab("sample-to-sample errors tolerated")+
ggtitle("false alarms")+
theme(legend.position = "none",text = element_text(family = "Times New Roman"),plot.title = element_text(hjust = 0.5))+
scale_fill_ptol()+
geom_bar(stat = "identity",position="dodge")+facet_grid(~gender_specific_thresholds),
labels = "AUTO") ->raw_hit_FA
dprime_data %>% filter(metric=="oct_jump_in_trial"|
metric=="err_in_trial_no_gender") -> dprime_data_oct
dprime_data_oct %>%
mutate(metric=ifelse(metric=="oct_jump_in_trial","octave \n jump","best \n threshold")) %>%
ggplot(aes(x=metric,fill=metric,fill=rise_fall ,y= dprime))+
xlab("method")+
scale_fill_economist()+
#geom_point(position=position_jitterdodge(0.1),alpha = 0.2)+
stat_summary(position = position_dodge(0.9),geom="bar")+
geom_hline(yintercept = 0,color="gray70")+
theme(legend.position = "bottom",)+
ylab("d'")+
ggtitle("d'")+
theme(legend.position = "none",text = element_text(family = "Times New Roman"),plot.title = element_text(hjust = 0.5))+
stat_summary(position = position_dodge(0.9),geom="errorbar") -> comp_to_oct
dprime_data %>% filter(threshold=="not trained singer") %>%
filter(metric!="oct_jump_in_trial") %>%
mutate(gender_specific_thresholds = ifelse(gender_specific_thresholds=="yes","gender-specific \n thresholds","uniform \n thresholds")) %>%
ggplot(aes(x=errors_allowed,fill=rise_fall ,y= dprime))+
xlab("sample-to-sample errors tolerated")+
scale_fill_ptol()+
#geom_point(position=position_jitterdodge(0.1),alpha = 0.2)+
stat_summary(position = position_dodge(0.9),geom="bar")+
geom_hline(yintercept = 0,color="gray70")+
theme(legend.position = "bottom")+
ylab("d'")+
ggtitle("d'")+
theme(legend.title = element_blank(),plot.title = element_text(hjust = 0.5))+
theme(text = element_text(family = "Times New Roman"))+
stat_summary(position = position_dodge(0.9),geom="errorbar")+
facet_wrap(~gender_specific_thresholds) -> dprime
legend<-get_legend(dprime)
Fscores$gender
Fscores %>%
mutate(gender = ifelse(gender=="gender-specific thresholds","gender-specific \n thresholds","uniform \n thresholds")) %>%
ggplot(aes(x=allow_errors,fill=RF,y=F))+
theme(legend.position = "none")+
scale_fill_ptol()+
ggtitle("F-score")+
xlab("sample-to-sample errors tolerated")+
ylab("F-score")+
ylim(0,1)+
theme(text = element_text(family = "Times New Roman"),plot.title = element_text(hjust = 0.5))+
geom_bar(position = position_dodge(0.9),stat = "identity")+facet_wrap(~gender) -> FScore_plot
library(cowplot)
plot_grid(raw_hit_FA,
legend,
plot_grid(dprime+theme(legend.position = "none"),FScore_plot,labels=c("C","D")),
nrow = 3,rel_heights = c(1,0.2,1)) -> allplot;allplot
leg<-get_legend(dprime)
plot_grid(
plot_grid(
dprime+theme(legend.position="none"),
FScore_plot,
comp_to_oct, labels = "AUTO",rel_widths = c(1,1,0.6),nrow=1),legend, rel_heights = c(1,0.1),nrow = 2) -> plot_red
jpeg(file = "allplot.jpg",res = 300,height=3.75,width =6.5,units="in")
allplot
dev.off()
jpeg(file = "plot_red.jpg",res = 300,height=3,width =6.5,units="in")
plot_red
dev.off()
###############################################
# this script detects sudden jumps in F0
# which are likely to be F0 measurement errors.
# created by:  Jeremy Steffman
# last updated: September 13, 2022
##############################################
### required input:
# long format data with the following columns
# -F0 in semitones
# -time in ms (can be at any interval, e.g., 1ms, 10ms, 100ms)
# -a column which uniquely identifies each trajectory
# -an optional column that contains speaker information.
### output
# - an annotated data frame which flags all sample to sample errors
# - a summary of flagged errors by unique identifier
# - a summary of flagged errors by unique identifier ONLY for files which were flagged as errors
# - a summary of errors by speaker, if the speaker column is specified
# this package required:
library(tidyverse)
# if not installed, use the following: install.packages("tidyverse")
# load in data here
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
data<-read.csv("example10speakers.csv") # change to be your data
### ### ### ### ### ### ### ### ### ### ### ### ### ### ### ### ### ###
#### SET THESE PARAMETERS #############################################
# (1) input the sampling rate of your F0 measures in milliseconds
time_step_ms = 10
## variable names
# input the names of the required variables in your data frame
# (2) name of the column containing F0 (in semitones, and Hz): replace YOUR_VARIABLE_NAME_HERE with your variable
data$F0_semitones <- data$F0_semitones
data$F0_Hz<-data$F0_Hz
# (3) name of variable that identifies each unique trajectory
data$uniqueID <- data$uniqueID
# (3) name of variable that identifies time, in milliseconds
data$t_ms <- data$t_ms
# (3) name of variable that identifies speaker, for optional speaker summary statistics
data$speaker <- data$speaker
#### ADJUST THESE THRESHOLDS IF DESIRED ####
# from Sundberg (1973), for 10 ms temporal intervals and female speakers
rise_threshold = 1.2631578947
fall_threshold = 1.7142857143
#######################################################################
### ### ### ### ### ### ### ### ### ### ### ### ### ### ### ### ### ###
## Run the rest of the scrip to annotate the data frame and  the save the outputs
time_mutation = time_step_ms/10
data %>% group_by(uniqueID) %>%
mutate(lead_F0_semitones= lead(F0_semitones, order_by=t_ms),
lead_F0_Hz= lead(F0_Hz, order_by=t_ms),
diff = lead_F0_semitones-F0_semitones,
ratio_Hz = lead_F0_Hz/F0_Hz,
oct_jump = ifelse(ratio_Hz<0.49|ratio_Hz>1.99,1,0), # halving and doubling ratios for octave jump detection
err = ifelse(diff>0&(abs(diff)*time_mutation)>rise_threshold,1,
ifelse(diff<0&(abs(diff)*time_mutation)>fall_threshold,1,0)),
err_prop_by_ID = mean(err,na.rm = T),
err_count_by_ID = sum(err,na.rm = T),
err_in_ID=ifelse(err_prop_by_ID>0,1,0),
time_of_err = ifelse(err_in_ID==1&err==1,t_ms,0),
F0_of_err = ifelse(lag(err)==1,F0_semitones,0),
# compute octave jumps
oct_jump_prop_by_ID = mean(oct_jump,na.rm = T),
oct_jump_count_by_ID = sum(oct_jump,na.rm = T),
oct_jump_in_ID= ifelse(err_prop_by_ID>0,1,0)) %>%
mutate_if(is.numeric, ~replace(., is.na(.), 0))-> data_annotated
# the following part of the script computes "carryover errors". These are errors for which the sample to sample difference does not necessarily exceed the threshold by the specified amount, but they are within one threshold's worth of the first inaccurate F0 value and are temporally adjacent to it. It is important to emphasize that these *may not be errors*, but  can inspected, for e.g., pitch doubling which raises a whole string of values to be inaccurate.
data_annotated %>% group_by(uniqueID) %>%
mutate(nrow=n(),
carryover_err_start = ifelse(lag(err)==1,1,0),
carryover_err = carryover_err_start) ->data_annotated
